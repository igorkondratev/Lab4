/*Класс Class в Java представляет тип данных и содержит множество методов, которые могут быть использованы для получения информации о типе объекта.
Вот как различаются методы, возвращающие строковое представление типа, описываемого объектом типа Class, в зависимости от типа данных:

Для массивов используется метод getCanonicalName(). Он возвращает строку, представляющую имя класса элементов массива, за которым следует один или более знаков "[]".
Например, для массива строк метод getCanonicalName() вернет "java.lang.String[]".

Для обобщенных типов используется метод getTypeName(). Он возвращает строку, представляющую имя класса, за которым следуют параметры типа в угловых скобках.
Например, для ArrayList<String> метод getTypeName() вернет "java.util.ArrayList<java.lang.String>".

Для внутренних классов используется метод getName(). Он возвращает строку, представляющую полное имя внутреннего класса, включая имя внешнего класса.
Например, для внутреннего класса MyClass.InnerClass метод getName() вернет "com.example.MyClass$InnerClass".

Для примитивных типов используется метод getTypeName(). Он возвращает строку, представляющую имя класса, соответствующего примитивному типу.
Например, для типа int метод getTypeName() вернет "int".

Методы toString(), toGenericString() и getName() также могут использоваться для получения информации о типе объекта.
Однако их поведение может зависеть от конкретного типа объекта и его области видимости.

Кроме того, следует отметить, что для каждого метода, возвращающего строковое представление типа,
существует аналогичный метод isAssignableFrom(Class<?> cls),
который позволяет проверить, можно ли присвоить объект типа Class этому типу.

getName() - возвращает имя класса
getCanonicalName() - возвращает каноническое имя класса
getTypeName() - возвращает имя класса, включая параметры типа
toString() - возвращает строковое представление класса
toGenericString() - возвращает обобщенное строковое представление класса
getSimpleName() - возвращает простое имя класса (без пакета)


*/
